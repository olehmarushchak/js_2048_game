{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","src/scripts/randomAddCellToEmpty.js","src/scripts/fillRandomEmptyPlacesStart.js","src/scripts/moveTile.js","src/modules/constants.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n/* eslint-disable max-len */ /* eslint-disable no-console */ \nfunction $cb383de034fd5339$export$79121081a2a7196a(max) {\n    const indexes = [];\n    let count = 0;\n    while(count < 4){\n        const randomIndex = Math.floor(Math.random() * max);\n        if (!indexes.includes(randomIndex)) {\n            if (Math.random() < 0.1) {\n                indexes.push(randomIndex);\n                count++;\n            } else if (count < 2) {\n                indexes.push(randomIndex);\n                count++;\n            }\n        }\n    }\n    return indexes;\n}\nfunction $cb383de034fd5339$export$fe52599b6fc81048(field) {\n    if (!Array.isArray(field)) {\n        // eslint-disable-next-line no-console\n        console.error(\"Expected field to be an array.\");\n        return field;\n    }\n    const emptyPositions = [];\n    for(let i = 0; i < field.length; i++){\n        for(let j = 0; j < field[i].length; j++)if (field[i][j] === 0) emptyPositions.push({\n            x: i,\n            y: j\n        });\n    }\n    if (emptyPositions.length === 0) {\n        if (0, $09e991522ca7e64e$export$46253330eead970a) (0, $09e991522ca7e64e$export$46253330eead970a).classList.remove(\"hidden\");\n        return field;\n    }\n    // Randomly select an empty position\n    const randomIndex = Math.floor(Math.random() * emptyPositions.length);\n    const { x: x, y: y } = emptyPositions[randomIndex];\n    // Randomly decide whether to add 2 or 4\n    const valueToAdd = Math.random() < 0.9 ? 2 : 4;\n    field[x][y] = valueToAdd;\n    return field;\n}\n\n\n\nfunction $46d863009fe2244a$export$49b6d2742e2e2e38(field) {\n    if (!Array.isArray(field)) {\n        // eslint-disable-next-line no-console\n        console.error(\"Expected field to be an array.\");\n        return field;\n    }\n    const emptyPositions = [];\n    for(let i = 0; i < field.length; i++){\n        for(let j = 0; j < field[i].length; j++)if (field[i][j] === 0) emptyPositions.push({\n            x: i,\n            y: j\n        });\n    }\n    if (emptyPositions.length >= 2) {\n        const randomIndexes = (0, $cb383de034fd5339$export$79121081a2a7196a)(emptyPositions.length);\n        for(let i = 0; i < 2; i++){\n            const { x: x, y: y } = emptyPositions[randomIndexes[i]];\n            field[x][y] = 2;\n        }\n    } else // eslint-disable-next-line no-console\n    console.log(\"Not enough empty positions to fill.\");\n    return field;\n}\n\n\nfunction $fe341d02e93c38c4$export$c590f9015b9c5094(tileField, size, direction) {\n    let mergeOccurred = false;\n    // eslint-disable-next-line max-len\n    const mergedTiles = new Array(size).fill(false); // Array to track merged tiles\n    switch(direction){\n        case \"left\":\n            // Compact tiles (move all tiles to the left)\n            for(let row = 0; row < size; row++){\n                for(let col = 1; col < size; col++)if (tileField[row][col] !== 0) {\n                    let currentCol = col;\n                    while(currentCol > 0 && tileField[row][currentCol - 1] === 0){\n                        // Move tile to the left\n                        tileField[row][currentCol - 1] = tileField[row][currentCol];\n                        tileField[row][currentCol] = 0;\n                        currentCol--;\n                    }\n                }\n            }\n            break;\n        case \"right\":\n            // Compact tiles (move all tiles to the right)\n            for(let row = 0; row < size; row++){\n                for(let col = size - 2; col >= 0; col--)if (tileField[row][col] !== 0) {\n                    let currentCol = col;\n                    while(currentCol < size - 1 && tileField[row][currentCol + 1] === 0){\n                        // Move tile to the right\n                        tileField[row][currentCol + 1] = tileField[row][currentCol];\n                        tileField[row][currentCol] = 0;\n                        currentCol++;\n                    }\n                }\n            }\n            break;\n        case \"up\":\n            // Compact tiles (move all tiles upwards)\n            for(let col = 0; col < size; col++){\n                for(let row = 1; row < size; row++)if (tileField[row][col] !== 0) {\n                    let currentRow = row;\n                    while(currentRow > 0 && tileField[currentRow - 1][col] === 0){\n                        // Move tile upwards\n                        tileField[currentRow - 1][col] = tileField[currentRow][col];\n                        tileField[currentRow][col] = 0;\n                        currentRow--;\n                    }\n                }\n            }\n            break;\n        case \"down\":\n            // Compact tiles (move all tiles downwards)\n            for(let col = 0; col < size; col++){\n                for(let row = size - 2; row >= 0; row--)if (tileField[row][col] !== 0) {\n                    let currentRow = row;\n                    while(currentRow < size - 1 && tileField[currentRow + 1][col] === 0){\n                        // Move tile downwards\n                        tileField[currentRow + 1][col] = tileField[currentRow][col];\n                        tileField[currentRow][col] = 0;\n                        currentRow++;\n                    }\n                }\n            }\n            break;\n        default:\n            throw new Error(`Invalid direction: ${direction}`);\n    }\n    // Merge tiles (combine adjacent identical tiles)\n    switch(direction){\n        case \"left\":\n            for(let row = 0; row < size; row++){\n                for(let col = 1; col < size; col++)if (tileField[row][col] !== 0 && tileField[row][col] === tileField[row][col - 1] && !mergedTiles[col - 1]) {\n                    // Merge tiles\n                    tileField[row][col - 1] *= 2;\n                    tileField[row][col] = 0;\n                    mergedTiles[col - 1] = true;\n                    mergeOccurred = true;\n                }\n            }\n            break;\n        case \"right\":\n            for(let row = 0; row < size; row++){\n                for(let col = size - 2; col >= 0; col--)if (tileField[row][col] !== 0 && tileField[row][col] === tileField[row][col + 1] && !mergedTiles[col + 1]) {\n                    // Merge tiles\n                    tileField[row][col + 1] *= 2;\n                    tileField[row][col] = 0;\n                    mergedTiles[col + 1] = true;\n                    mergeOccurred = true;\n                }\n            }\n            break;\n        case \"up\":\n            for(let col = 0; col < size; col++){\n                for(let row = 1; row < size; row++)if (tileField[row][col] !== 0 && tileField[row][col] === tileField[row - 1][col] && !mergedTiles[row - 1]) {\n                    // Merge tiles\n                    tileField[row - 1][col] *= 2;\n                    tileField[row][col] = 0;\n                    mergedTiles[row - 1] = true;\n                    mergeOccurred = true;\n                }\n            }\n            break;\n        case \"down\":\n            for(let col = 0; col < size; col++){\n                for(let row = size - 2; row >= 0; row--)if (tileField[row][col] !== 0 && tileField[row][col] === tileField[row + 1][col] && !mergedTiles[row + 1]) {\n                    // Merge tiles\n                    tileField[row + 1][col] *= 2;\n                    tileField[row][col] = 0;\n                    mergedTiles[row + 1] = true;\n                    mergeOccurred = true;\n                }\n            }\n            break;\n        default:\n            throw new Error(`Invalid direction: ${direction}`);\n    }\n    return {\n        mergeOccurred: mergeOccurred,\n        tileField: tileField\n    };\n}\n\n\nconst $fab82b0583212ae9$export$cb0e242d14fc87d0 = \"game run\";\nconst $fab82b0583212ae9$export$7be0f359cf83fae4 = \"game is not started\";\nconst $fab82b0583212ae9$export$21b07c8f274aebd5 = {\n    RIGHT: \"right\",\n    LEFT: \"left\",\n    DOWN: \"down\",\n    UP: \"up\"\n};\nconst $fab82b0583212ae9$export$e62c44db5dabc4ee = 2048;\n\n\n\"use strict\";\n\nvar $a5fd07fa01589658$require$STATUS_RUN = $fab82b0583212ae9$export$cb0e242d14fc87d0;\nclass $a5fd07fa01589658$var$Game {\n    initialState;\n    constructor(initialState){\n        this.initialState = initialState;\n        console.log(this.initialState);\n    }\n    moveUp() {\n        const { tileField: tileField } = this.initialState;\n        const size = tileField.length;\n        const { mergeOccurred: mergeOccurred, tileField: newTileField } = (0, $fe341d02e93c38c4$export$c590f9015b9c5094)(tileField, size, (0, $fab82b0583212ae9$export$21b07c8f274aebd5).UP);\n        if (mergeOccurred) (0, $fe341d02e93c38c4$export$c590f9015b9c5094)(newTileField, size, (0, $fab82b0583212ae9$export$21b07c8f274aebd5).UP); // Compact tiles again after merging\n        (0, $cb383de034fd5339$export$fe52599b6fc81048)(this.initialState.tileField);\n        console.log(newTileField); // Log the updated tileField after moving up\n    }\n    moveLeft() {\n        const { tileField: tileField } = this.initialState;\n        const size = tileField.length;\n        const { mergeOccurred: mergeOccurred, tileField: newTileField } = (0, $fe341d02e93c38c4$export$c590f9015b9c5094)(tileField, size, (0, $fab82b0583212ae9$export$21b07c8f274aebd5).LEFT);\n        if (mergeOccurred) (0, $fe341d02e93c38c4$export$c590f9015b9c5094)(newTileField, size, (0, $fab82b0583212ae9$export$21b07c8f274aebd5).LEFT);\n        (0, $cb383de034fd5339$export$fe52599b6fc81048)(this.initialState.tileField);\n    }\n    moveRight() {\n        const { tileField: tileField } = this.initialState;\n        const size = tileField.length;\n        const { mergeOccurred: mergeOccurred, tileField: newTileField } = (0, $fe341d02e93c38c4$export$c590f9015b9c5094)(tileField, size, (0, $fab82b0583212ae9$export$21b07c8f274aebd5).RIGHT);\n        if (mergeOccurred) (0, $fe341d02e93c38c4$export$c590f9015b9c5094)(newTileField, size, (0, $fab82b0583212ae9$export$21b07c8f274aebd5).RIGHT); // Compact tiles again after merging\n        (0, $cb383de034fd5339$export$fe52599b6fc81048)(this.initialState.tileField);\n    }\n    moveDown() {\n        const { tileField: tileField } = this.initialState;\n        const size = tileField.length;\n        const { mergeOccurred: mergeOccurred, tileField: newTileField } = (0, $fe341d02e93c38c4$export$c590f9015b9c5094)(tileField, size, (0, $fab82b0583212ae9$export$21b07c8f274aebd5).DOWN);\n        if (mergeOccurred) (0, $fe341d02e93c38c4$export$c590f9015b9c5094)(newTileField, size, (0, $fab82b0583212ae9$export$21b07c8f274aebd5).DOWN); // Compact tiles again after merging\n        (0, $cb383de034fd5339$export$fe52599b6fc81048)(this.initialState.tileField);\n    }\n    getScore() {\n        let score = 0;\n        for(let i = 0; i < this.initialState.tileField.length; i++)for(let j = 0; j < this.initialState.tileField[i].length; j++)score += this.initialState.tileField[i][j];\n        this.initialState.score = score;\n    }\n    getState() {\n        return this.initialState;\n    }\n    getStatus() {\n        // eslint-disable-next-line no-console\n        console.log(\"Current status:\", this.initialState.status);\n    }\n    start() {\n        (0, $46d863009fe2244a$export$49b6d2742e2e2e38)(this.initialState.tileField);\n        this.initialState.status = $a5fd07fa01589658$require$STATUS_RUN;\n    }\n    restart() {\n        this.initialState.score = 0;\n        this.initialState.tileField = [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n    }\n    setTile() {\n        // eslint-disable-next-line max-len\n        const table = document.querySelector(\".game-field\");\n        if (table) {\n            const rows = table.querySelectorAll(\".field-row\");\n            for(let i = 0; i < this.initialState.tileField.length; i++){\n                const cells = rows[i].querySelectorAll(\".field-cell\");\n                for(let j = 0; j < this.initialState.tileField[i].length; j++){\n                    const cell = cells[j];\n                    const cellValue = this.initialState.tileField[i][j];\n                    const currentClass = `field-cell--${cellValue}`;\n                    cell.className = \"field-cell\";\n                    if (cellValue !== 0) {\n                        cell.classList.add(currentClass);\n                        cell.textContent = `${cellValue}`;\n                    } else cell.textContent = \"\";\n                }\n            }\n        }\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\n\nvar $09e991522ca7e64e$require$STATUS_NON_RUN = $fab82b0583212ae9$export$7be0f359cf83fae4;\nvar $09e991522ca7e64e$require$STATUS_RUN = $fab82b0583212ae9$export$cb0e242d14fc87d0;\nvar $09e991522ca7e64e$require$COUNT_WIN = $fab82b0583212ae9$export$e62c44db5dabc4ee;\nconst $09e991522ca7e64e$var$initialState = {\n    status: $09e991522ca7e64e$require$STATUS_NON_RUN,\n    tileField: [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ],\n    score: 0\n};\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports($09e991522ca7e64e$var$initialState);\nconst $09e991522ca7e64e$export$46253330eead970a = document.getElementById(\"message-lose\");\nconst $09e991522ca7e64e$var$startButton = document.getElementById(\"start\");\nconst $09e991522ca7e64e$var$restartButton = document.getElementById(\"restart\");\nconst $09e991522ca7e64e$var$score = document.getElementById(\"game-score\");\nconst $09e991522ca7e64e$var$messageStart = document.getElementById(\"message-start\");\nconst $09e991522ca7e64e$var$messageWin = document.getElementById(\"message-win\");\nconst $09e991522ca7e64e$var$appendScore = ()=>{\n    $09e991522ca7e64e$var$game.getScore();\n    if ($09e991522ca7e64e$var$initialState.score === $09e991522ca7e64e$require$COUNT_WIN) $09e991522ca7e64e$var$messageWin.classList.remove(\"hidden\");\n    $09e991522ca7e64e$var$score.textContent = `${$09e991522ca7e64e$var$initialState.score}`;\n};\n// eslint-disable-next-line no-shadow\nconst $09e991522ca7e64e$var$moveEvent = (event)=>$09e991522ca7e64e$var$moves(event);\nconst $09e991522ca7e64e$var$start = ()=>{\n    $09e991522ca7e64e$var$game.start();\n    $09e991522ca7e64e$var$game.setTile();\n    if ($09e991522ca7e64e$var$game.getState().status === $09e991522ca7e64e$require$STATUS_RUN) {\n        $09e991522ca7e64e$var$startButton.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$restartButton.classList.remove(\"hidden\");\n    }\n    $09e991522ca7e64e$export$46253330eead970a?.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n    document.addEventListener(\"keydown\", $09e991522ca7e64e$var$moveEvent);\n};\nconst $09e991522ca7e64e$var$restart = ()=>{\n    $09e991522ca7e64e$var$game.restart();\n    $09e991522ca7e64e$var$appendScore();\n    $09e991522ca7e64e$var$game.setTile();\n    $09e991522ca7e64e$var$startButton.classList.remove(\"hidden\");\n    $09e991522ca7e64e$var$restartButton.classList.add(\"hidden\");\n    $09e991522ca7e64e$export$46253330eead970a?.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$messageStart.classList.remove(\"hidden\");\n    document.removeEventListener(\"keydown\", $09e991522ca7e64e$var$moveEvent);\n};\n$09e991522ca7e64e$var$startButton.addEventListener(\"click\", $09e991522ca7e64e$var$start);\n$09e991522ca7e64e$var$restartButton.addEventListener(\"click\", $09e991522ca7e64e$var$restart);\n// eslint-disable-next-line no-shadow\nconst $09e991522ca7e64e$var$moves = (event)=>{\n    switch(event.key){\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            $09e991522ca7e64e$var$game.setTile();\n            $09e991522ca7e64e$var$appendScore();\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            $09e991522ca7e64e$var$game.setTile();\n            $09e991522ca7e64e$var$appendScore();\n            break;\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            $09e991522ca7e64e$var$game.setTile();\n            $09e991522ca7e64e$var$appendScore();\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            $09e991522ca7e64e$var$game.setTile();\n            $09e991522ca7e64e$var$appendScore();\n            break;\n    }\n};\n\n\n//# sourceMappingURL=index.d929db7c.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst {\n  STATUS_NON_RUN,\n  STATUS_RUN,\n  COUNT_WIN,\n} = require('../modules/constants');\n\nconst initialState = {\n  status: STATUS_NON_RUN,\n  tileField: [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ],\n  score: 0,\n};\n\nconst game = new Game(initialState);\n\nexport const messageStartLose = document.getElementById('message-lose');\n\nconst startButton = document.getElementById('start');\nconst restartButton = document.getElementById('restart');\nconst score = document.getElementById('game-score');\nconst messageStart = document.getElementById('message-start');\nconst messageWin = document.getElementById('message-win');\n\nconst appendScore = () => {\n  game.getScore();\n\n  if (initialState.score === COUNT_WIN) {\n    messageWin.classList.remove('hidden');\n  }\n\n  score.textContent = `${initialState.score}`;\n};\n\n// eslint-disable-next-line no-shadow\nconst moveEvent = (event) => moves(event);\n\nconst start = () => {\n  game.start();\n  game.setTile();\n\n  if (game.getState().status === STATUS_RUN) {\n    startButton.classList.add('hidden');\n    restartButton.classList.remove('hidden');\n  }\n\n  messageStartLose?.classList.add('hidden');\n  messageStart.classList.add('hidden');\n  document.addEventListener('keydown', moveEvent);\n};\n\nconst restart = () => {\n  game.restart();\n  appendScore();\n  game.setTile();\n\n  startButton.classList.remove('hidden');\n  restartButton.classList.add('hidden');\n\n  messageStartLose?.classList.add('hidden');\n  messageStart.classList.remove('hidden');\n  document.removeEventListener('keydown', moveEvent);\n};\n\nstartButton.addEventListener('click', start);\nrestartButton.addEventListener('click', restart);\n\n// eslint-disable-next-line no-shadow\nconst moves = (event) => {\n  switch (event.key) {\n    case 'ArrowUp':\n      game.moveUp();\n      game.setTile();\n      appendScore();\n      break;\n\n    case 'ArrowDown':\n      game.moveDown();\n      game.setTile();\n      appendScore();\n      break;\n\n    case 'ArrowLeft':\n      game.moveLeft();\n      game.setTile();\n      appendScore();\n      break;\n\n    case 'ArrowRight':\n      game.moveRight();\n      game.setTile();\n      appendScore();\n      break;\n  }\n};\n","/* eslint-disable max-len */\n/* eslint-disable no-console */\n'use strict';\n\nimport { fillRandomEmptyPlaces } from '../scripts/randomAddCellToEmpty';\n// eslint-disable-next-line max-len\nimport { fillRandomEmptyPlacesStart } from '../scripts/fillRandomEmptyPlacesStart';\nimport { moveTiles } from '../scripts/moveTile';\nimport { Arrow } from './constants';\n\nconst { STATUS_RUN } = require('./constants');\n\nclass Game {\n  initialState;\n\n  constructor(initialState) {\n    this.initialState = initialState;\n\n    console.log(this.initialState);\n  }\n\n  moveUp() {\n    const { tileField } = this.initialState;\n    const size = tileField.length;\n\n    const { mergeOccurred, tileField: newTileField } = moveTiles(\n      tileField,\n      size,\n      Arrow.UP,\n    );\n\n    if (mergeOccurred) {\n      moveTiles(newTileField, size, Arrow.UP); // Compact tiles again after merging\n    }\n\n    fillRandomEmptyPlaces(this.initialState.tileField);\n    console.log(newTileField); // Log the updated tileField after moving up\n  }\n\n  moveLeft() {\n    const { tileField } = this.initialState;\n    const size = tileField.length;\n\n    const { mergeOccurred, tileField: newTileField } = moveTiles(\n      tileField,\n      size,\n      Arrow.LEFT,\n    );\n\n    if (mergeOccurred) {\n      moveTiles(newTileField, size, Arrow.LEFT);\n    }\n\n    fillRandomEmptyPlaces(this.initialState.tileField);\n  }\n\n  moveRight() {\n    const { tileField } = this.initialState;\n    const size = tileField.length;\n\n    const { mergeOccurred, tileField: newTileField } = moveTiles(\n      tileField,\n      size,\n      Arrow.RIGHT,\n    );\n\n    if (mergeOccurred) {\n      moveTiles(newTileField, size, Arrow.RIGHT); // Compact tiles again after merging\n    }\n\n    fillRandomEmptyPlaces(this.initialState.tileField);\n  }\n\n  moveDown() {\n    const { tileField } = this.initialState;\n    const size = tileField.length;\n\n    const { mergeOccurred, tileField: newTileField } = moveTiles(\n      tileField,\n      size,\n      Arrow.DOWN,\n    );\n\n    if (mergeOccurred) {\n      moveTiles(newTileField, size, Arrow.DOWN); // Compact tiles again after merging\n    }\n\n    fillRandomEmptyPlaces(this.initialState.tileField);\n  }\n\n  getScore() {\n    let score = 0;\n\n    for (let i = 0; i < this.initialState.tileField.length; i++) {\n      for (let j = 0; j < this.initialState.tileField[i].length; j++) {\n        score += this.initialState.tileField[i][j];\n      }\n    }\n\n    this.initialState.score = score;\n  }\n\n  getState() {\n    return this.initialState;\n  }\n\n  getStatus() {\n    // eslint-disable-next-line no-console\n    console.log('Current status:', this.initialState.status);\n  }\n\n  start() {\n    fillRandomEmptyPlacesStart(this.initialState.tileField);\n    this.initialState.status = STATUS_RUN;\n  }\n\n  restart() {\n    this.initialState.score = 0;\n\n    this.initialState.tileField = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n  }\n\n  setTile() {\n    // eslint-disable-next-line max-len\n    const table = document.querySelector('.game-field');\n\n    if (table) {\n      const rows = table.querySelectorAll('.field-row');\n\n      for (let i = 0; i < this.initialState.tileField.length; i++) {\n        const cells = rows[i].querySelectorAll('.field-cell');\n\n        for (let j = 0; j < this.initialState.tileField[i].length; j++) {\n          const cell = cells[j];\n          const cellValue = this.initialState.tileField[i][j];\n\n          const currentClass = `field-cell--${cellValue}`;\n\n          cell.className = 'field-cell';\n\n          if (cellValue !== 0) {\n            cell.classList.add(currentClass);\n            cell.textContent = `${cellValue}`;\n          } else {\n            cell.textContent = '';\n          }\n        }\n      }\n    }\n  }\n}\n\nmodule.exports = Game;\n","import { messageStartLose } from './main';\n\nexport function getRandomIndexes(max) {\n  const indexes = [];\n  let count = 0;\n\n  while (count < 4) {\n    const randomIndex = Math.floor(Math.random() * max);\n\n    if (!indexes.includes(randomIndex)) {\n      if (Math.random() < 0.1) {\n        indexes.push(randomIndex);\n        count++;\n      } else if (count < 2) {\n        indexes.push(randomIndex);\n        count++;\n      }\n    }\n  }\n\n  return indexes;\n}\n\nexport function fillRandomEmptyPlaces(field) {\n  if (!Array.isArray(field)) {\n    // eslint-disable-next-line no-console\n    console.error('Expected field to be an array.');\n\n    return field;\n  }\n\n  const emptyPositions = [];\n\n  for (let i = 0; i < field.length; i++) {\n    for (let j = 0; j < field[i].length; j++) {\n      if (field[i][j] === 0) {\n        emptyPositions.push({ x: i, y: j });\n      }\n    }\n  }\n\n  if (emptyPositions.length === 0) {\n    if (messageStartLose) {\n      messageStartLose.classList.remove('hidden');\n    }\n\n    return field;\n  }\n\n  // Randomly select an empty position\n  const randomIndex = Math.floor(Math.random() * emptyPositions.length);\n  const { x, y } = emptyPositions[randomIndex];\n\n  // Randomly decide whether to add 2 or 4\n  const valueToAdd = Math.random() < 0.9 ? 2 : 4;\n\n  field[x][y] = valueToAdd;\n\n  return field;\n}\n","import { getRandomIndexes } from './randomAddCellToEmpty';\n\nexport function fillRandomEmptyPlacesStart(field) {\n  if (!Array.isArray(field)) {\n    // eslint-disable-next-line no-console\n    console.error('Expected field to be an array.');\n\n    return field;\n  }\n\n  const emptyPositions = [];\n\n  for (let i = 0; i < field.length; i++) {\n    for (let j = 0; j < field[i].length; j++) {\n      if (field[i][j] === 0) {\n        emptyPositions.push({ x: i, y: j });\n      }\n    }\n  }\n\n  if (emptyPositions.length >= 2) {\n    const randomIndexes = getRandomIndexes(emptyPositions.length);\n\n    for (let i = 0; i < 2; i++) {\n      const { x, y } = emptyPositions[randomIndexes[i]];\n\n      field[x][y] = 2;\n    }\n  } else {\n    // eslint-disable-next-line no-console\n    console.log('Not enough empty positions to fill.');\n  }\n\n  return field;\n}\n","export function moveTiles(tileField, size, direction) {\n  let mergeOccurred = false;\n  // eslint-disable-next-line max-len\n  const mergedTiles = new Array(size).fill(false); // Array to track merged tiles\n\n  switch (direction) {\n    case 'left':\n      // Compact tiles (move all tiles to the left)\n      for (let row = 0; row < size; row++) {\n        for (let col = 1; col < size; col++) {\n          if (tileField[row][col] !== 0) {\n            let currentCol = col;\n\n            while (currentCol > 0 && tileField[row][currentCol - 1] === 0) {\n              // Move tile to the left\n              tileField[row][currentCol - 1] = tileField[row][currentCol];\n              tileField[row][currentCol] = 0;\n              currentCol--;\n            }\n          }\n        }\n      }\n      break;\n\n    case 'right':\n      // Compact tiles (move all tiles to the right)\n      for (let row = 0; row < size; row++) {\n        for (let col = size - 2; col >= 0; col--) {\n          if (tileField[row][col] !== 0) {\n            let currentCol = col;\n\n            while (\n              currentCol < size - 1 &&\n              tileField[row][currentCol + 1] === 0\n            ) {\n              // Move tile to the right\n              tileField[row][currentCol + 1] = tileField[row][currentCol];\n              tileField[row][currentCol] = 0;\n              currentCol++;\n            }\n          }\n        }\n      }\n      break;\n\n    case 'up':\n      // Compact tiles (move all tiles upwards)\n      for (let col = 0; col < size; col++) {\n        for (let row = 1; row < size; row++) {\n          if (tileField[row][col] !== 0) {\n            let currentRow = row;\n\n            while (currentRow > 0 && tileField[currentRow - 1][col] === 0) {\n              // Move tile upwards\n              tileField[currentRow - 1][col] = tileField[currentRow][col];\n              tileField[currentRow][col] = 0;\n              currentRow--;\n            }\n          }\n        }\n      }\n      break;\n\n    case 'down':\n      // Compact tiles (move all tiles downwards)\n      for (let col = 0; col < size; col++) {\n        for (let row = size - 2; row >= 0; row--) {\n          if (tileField[row][col] !== 0) {\n            let currentRow = row;\n\n            while (\n              currentRow < size - 1 &&\n              tileField[currentRow + 1][col] === 0\n            ) {\n              // Move tile downwards\n              tileField[currentRow + 1][col] = tileField[currentRow][col];\n              tileField[currentRow][col] = 0;\n              currentRow++;\n            }\n          }\n        }\n      }\n      break;\n\n    default:\n      throw new Error(`Invalid direction: ${direction}`);\n  }\n\n  // Merge tiles (combine adjacent identical tiles)\n  switch (direction) {\n    case 'left':\n      for (let row = 0; row < size; row++) {\n        for (let col = 1; col < size; col++) {\n          if (\n            tileField[row][col] !== 0 &&\n            tileField[row][col] === tileField[row][col - 1] &&\n            !mergedTiles[col - 1]\n          ) {\n            // Merge tiles\n            tileField[row][col - 1] *= 2;\n            tileField[row][col] = 0;\n            mergedTiles[col - 1] = true;\n            mergeOccurred = true;\n          }\n        }\n      }\n      break;\n\n    case 'right':\n      for (let row = 0; row < size; row++) {\n        for (let col = size - 2; col >= 0; col--) {\n          if (\n            tileField[row][col] !== 0 &&\n            tileField[row][col] === tileField[row][col + 1] &&\n            !mergedTiles[col + 1]\n          ) {\n            // Merge tiles\n            tileField[row][col + 1] *= 2;\n            tileField[row][col] = 0;\n            mergedTiles[col + 1] = true;\n            mergeOccurred = true;\n          }\n        }\n      }\n      break;\n\n    case 'up':\n      for (let col = 0; col < size; col++) {\n        for (let row = 1; row < size; row++) {\n          if (\n            tileField[row][col] !== 0 &&\n            tileField[row][col] === tileField[row - 1][col] &&\n            !mergedTiles[row - 1]\n          ) {\n            // Merge tiles\n            tileField[row - 1][col] *= 2;\n            tileField[row][col] = 0;\n            mergedTiles[row - 1] = true;\n            mergeOccurred = true;\n          }\n        }\n      }\n      break;\n\n    case 'down':\n      for (let col = 0; col < size; col++) {\n        for (let row = size - 2; row >= 0; row--) {\n          if (\n            tileField[row][col] !== 0 &&\n            tileField[row][col] === tileField[row + 1][col] &&\n            !mergedTiles[row + 1]\n          ) {\n            // Merge tiles\n            tileField[row + 1][col] *= 2;\n            tileField[row][col] = 0;\n            mergedTiles[row + 1] = true;\n            mergeOccurred = true;\n          }\n        }\n      }\n      break;\n\n    default:\n      throw new Error(`Invalid direction: ${direction}`);\n  }\n\n  return { mergeOccurred, tileField };\n}\n","export const STATUS_RUN = 'game run';\nexport const STATUS_NON_RUN = 'game is not started';\nexport const Arrow = {\n  RIGHT: 'right',\n  LEFT: 'left',\n  DOWN: 'down',\n  UP: 'up',\n};\nexport const COUNT_WIN = 2048;\n"],"names":["$a5fd07fa01589658$exports","$cb383de034fd5339$export$fe52599b6fc81048","field","Array","isArray","console","error","emptyPositions","i","length","j","push","x","y","$09e991522ca7e64e$export$46253330eead970a","classList","remove","randomIndex","Math","floor","random","$fe341d02e93c38c4$export$c590f9015b9c5094","tileField","size","direction","mergeOccurred","mergedTiles","fill","row","col","currentCol","currentRow","Error","$fab82b0583212ae9$export$cb0e242d14fc87d0","$fab82b0583212ae9$export$21b07c8f274aebd5","RIGHT","LEFT","DOWN","UP","initialState","constructor","log","moveUp","newTileField","moveLeft","moveRight","moveDown","getScore","score","getState","getStatus","status","start","randomIndexes","max","indexes","count","includes","restart","setTile","table","document","querySelector","rows","querySelectorAll","cells","cell","cellValue","currentClass","className","add","textContent","$09e991522ca7e64e$var$initialState","$09e991522ca7e64e$var$game","getElementById","$09e991522ca7e64e$var$startButton","$09e991522ca7e64e$var$restartButton","$09e991522ca7e64e$var$score","$09e991522ca7e64e$var$messageStart","$09e991522ca7e64e$var$messageWin","$09e991522ca7e64e$var$appendScore","$09e991522ca7e64e$var$moveEvent","event","$09e991522ca7e64e$var$moves","addEventListener","removeEventListener","key"],"version":3,"file":"index.d929db7c.js.map"}